#!/usr/bin/python

import ldap
import ldap.filter
import fuse
import sys
import os
import errno
import time
import stat
import socket
import traceback

def load_config():
	result = {
		"USER": {
			None: {
				"KEYFMT": "%(sshPublicKey)s",
				"ITERATE": "sshPublicKey",
				"GROUP": None,
				"FILTER": None,
				"BASE": None,
				"SELF": None,
				"REQUIRE": None,
			},
		},
	}
	for fname in ("/etc/ldap/ldap.conf", os.path.expanduser("~/ldaprc"), os.path.expanduser("~/.ldaprc"), "ldaprc"):
		try:
			f = open("/etc/ldap/ldap.conf")
		except IOError, e:
			if e.errno != errno.ENOENT:
				raise
			continue
		for line in f:
			if not line.strip() or line.startswith("#"):
				continue
			token, value = line.split(None, 1)
			token = token.upper()
			if token in ("URI",):
				value = value.split()
			result[token] = value
		f.close()
	for k, value in os.environ.iteritems():
		if k.startswith("LDAP"):
			token = k[4:].upper()
			if token in ("URI",):
				value = value.split()
			result[token] = value
		if k.startswith("USER_"):
			k2 = k[5:]
			if k2 in ("KEYFMT", "GROUP", "FILTER", "ITERATE", "BASE", "SELF", "REQUIRE"):
				result["USER"][None][k2] = value
			elif k2.endswith("_KEYFMT") or k2.endswith("_GROUP") or k2.endswith("_FILTER") or k2.endswith("_ITERATE") or k2.endswith("_BASE") or k2.endswith("_SELF") or k2.endswith("REQUIRE"):
				uid, k3 = k2.rsplit("_", 1)
				result["USER"].setdefault(uid.lower(), {})[k3] = value
	return result

class DictKeyLogger(object):
	def __init__(self):
		self.keys = []

	def __getitem__(self, key):
		self.keys.append(key)
		return ""

def _and(*expressions):
	expressions = [e for e in expressions if e]
	if len(expressions) > 1:
		r = "(&" + "".join(expressions) + ")"
	elif len(expressions) == 1:
		r = expressions[0]
	else:
		r = None
	#print r
	return r

def _eq(key, value):
	return "(%s=%s)" % (key, ldap.filter.escape_filter_chars(value))

def _iterate(keys, attributes, i=0):
	if i >= len(keys):
		yield attributes
		return
	values = attributes.get(keys[i], [])
	if not isinstance(values, list):
		values = [values]
	a2 = dict(attributes)
	for value in values:
		a2[keys[i]] = value
		for a3 in _iterate(keys, a2, i+1):
			yield a3

def lookup_user_keys(uid):
	l = _ldap_open_bind()
	c = {}
	c.update(config["USER"][None])
	c.update(config["USER"].get(uid, {}))

	attrs = {
		"uid": uid,
		"hostName": socket.gethostname(),
	}

	members_base = users_base = config["BASE"]
	base = config["USER"][None]["BASE"]
	if base:
		members_base = users_base = base % {"hostName": attrs["hostName"]}
	base = config["USER"].get(uid, {}).get("BASE")
	if base:
		members_base = base % attrs
	del base

	dkl = DictKeyLogger()
	c["KEYFMT"] % dkl
	formatAttributes = list(set(dkl.keys))
	del dkl
	iterateAttributes = c["ITERATE"].split()
	queryAttributes = list(set(formatAttributes) | set(iterateAttributes))
	singleValueAttributes = set(formatAttributes) - set(iterateAttributes)

	search = []
	if c["GROUP"]:
		group = c["GROUP"] % attrs
		filter_ = "(|(objectClass=groupOfUniqueNames)(objectClass=posixGroup))"

		result_id = l.search(group, ldap.SCOPE_BASE, filter_, ["uniqueMember", "memberUid"])
		result_set = []
		result_type, result_data = l.result(result_id, 0, timeout=5)
		while result_data:
			if result_type == ldap.RES_SEARCH_ENTRY:
				result_set += result_data
			result_type, result_data = l.result(result_id, 0, timeout=5)
		del result_type, result_data
		if result_set:
			for uniqueMember in result_set[0][1].get("uniqueMember", ()):
				search.append((uniqueMember, ldap.SCOPE_BASE, _and(c["FILTER"])))
			for memberUid in result_set[0][1].get("memberUid", ()):
				search.append((members_base, ldap.SCOPE_SUBTREE, _and(_eq("uid", memberUid), c["FILTER"])))
		del result_set
	if not c["GROUP"] or c["SELF"]:
		search.append((users_base, ldap.SCOPE_SUBTREE, _and(_eq("uid", uid), c["FILTER"])))

	requiredAttributes = set((c["REQUIRE"] or "").split()) | set(c["ITERATE"].split())
	result_set = {}
	filter2 = "(&%s)" % "".join("(%s=*)"%attr for attr in requiredAttributes)
	for base, scope, filter_ in search:
		result_id = l.search(base, scope, _and(filter2, filter_), queryAttributes)
		result_type, result_data = l.result(result_id, 0, timeout=5)
		while result_data:
			if result_type == ldap.RES_SEARCH_ENTRY:
				for dn, attributes in result_data:
					result_set[dn] = attributes
			result_type, result_data = l.result(result_id, 0, timeout=5)

	result = ""
	for dn, attributes in result_set.iteritems():
		flag = True
		for key in singleValueAttributes:
			values = attributes.get(key, [])
			if isinstance(values, list):
				if not values:
					if key in requiredAttributes:
						flag = False
						break
					attributes[key] = ""
				else:
					attributes[key] = values[0]
		if not flag:
			continue
		for a2 in _iterate(iterateAttributes, attributes):
			result += c["KEYFMT"] % a2 + "\n"
	return result

def _ldap_open_bind():
	l = ldap.initialize(config["URI"][0])
	if config.get("BINDDN"):
		l.simple_bind_s(config.get("BINDDN"), config.get("BINDPW", ""))
	return l

class Error(IOError):
	def __init__(self, eno, detail=None):
		if detail is None:
			detail = os.strerror(eno)
		super(Error, self).__init__(eno, detail)

fuse.fuse_python_api = (0, 2)

def lookup_users():
	try:
		l = _ldap_open_bind()

		users_base = config["BASE"]
		base = config["USER"][None]["BASE"]
		if base:
			users_base = base % {"hostName": socket.gethostname()}
		del base

		result_id = l.search(users_base, ldap.SCOPE_SUBTREE, '(uid=*)', ['uid'])
		result_set = set()
		result_type, result_data = l.result(result_id, 0, timeout=5)
		while result_data:
			if result_type == ldap.RES_SEARCH_ENTRY:
				for dn, attributes in result_data:
					uids = attributes.get("uid", [])
					result_set |= set(uids if isinstance(uids, list) else [uids])
			result_type, result_data = l.result(result_id, 0, timeout=5)
		for uid, uc in config["USER"].iteritems():
			if uid is None:
				continue
			if uc["GROUP"]:
				result_set.add(uid)
		return sorted(result_set)
	except Exception:
		print traceback.format_exc()
		raise Error(errno.EIO)

def getent(path):
	if path == "/":
		return None
	base, name = os.path.split(path)
	if base != "/":
		return None
	try:
		result = lookup_user_keys(name)
	except KeyError, e:
		result = "# LDAP error: option %r not configured\n" % (e.args[0],)
	except ldap.SERVER_DOWN, e:
		result = "# LDAP error: SERVER_DOWN; %r\n" % (e,)
	except ldap.UNWILLING_TO_PERFORM, e:
		result = "# LDAP error: UNWILLING_TO_PERFORM (wrong or missing authentication); %r\n" % (e,)
	except Exception, e:
		result = "# LDAP error: unknown error; %r\n" % (e,) + traceback.format_exc()
	try:
		result = open(os.path.expanduser("~" + name + "/.ssh/authorized_keys"), "r").read().strip() + "\n" + result
	except IOError:
		pass
	return result

def log(f):
	return f
	n = f.__name__
	def wrapper(self, *args, **kw):
		fa = []
		print "CALL %s.%s(???)" % (self.__class__.__name__, n)
		print repr(args), repr(kw), type(args), type(kw)
		"""
		print 1
		for a in args:
			print a, type(a)
			fa.append(repr(a))
		print 2
		for k, v in kw.iteritems():
			print k, v
			fa.append("%s=%r" % (k, v))
		print 3
		print "CALL %s.%s(%s)" % (self.__class__.__name__, n, ", ".join(fa))
		"""
		try:
			result = f(self, *args, **kw)
			print "OK -> %r" % (result,)
			if hasattr(result, "__dict__"):
				print result.__dict__
			return result
		except BaseException, e:
			print "ERROR -> %r" % (e,)
			raise
	return wrapper

class AuthorizedKeysFile(fuse.FuseFileInfo):
	@log
	def __init__(self, path, flags, mode=None):
		super(AuthorizedKeysFile, self).__init__()
		if mode is not None:
			raise Error(errno.EACCESS)
		if path == "/":
			raise Error(errno.EISDIR)
		self.keep_cache = False
		self.data = getent(path)
		if self.data is None:
			raise Error(errno.ENOENT)

	@log
	def read(self, len, offset):
		return self.data[offset:offset+len]

	@log
	def write(self, buf, offset):
		raise Error(errno.EACCESS)

	@log
	def release(self, flags):
		self.data = None

	@log
	def fsync(self, isfsyncfile):
		pass

	@log
	def flush(self):
		pass

	@log
	def fgetattr(self):
		return fuse.Stat(
			st_mode = 0100444,
			st_ino = 0,
			st_dev = 0,
			st_nlink = 1,
			st_uid = 0,
			st_gid = 0,
			st_rdev = 0,
			st_blksize = 4096,
			st_blocks = 1,
			st_size = len(self.data),
			st_atime = _time,
			st_mtime = _time,
			st_ctime = _time,
		)

	@log
	def ftruncate(self, len):
		raise Error(errno.EACCESS)

	@log
        def lock(self, cmd, owner, **kw):
		raise Error(errno.ENOSYS)

_time = time.time()

class NullFS(fuse.Fuse):
	file_class = AuthorizedKeysFile

	def __init__(self, *args, **kw):
		fuse.Fuse.__init__(self, *args, **kw)

	@log
	def getattr(self, path):
		if path == "/":
			return fuse.Stat(
				st_mode = stat.S_IFDIR | 0555,
				st_ino = 0,
				st_dev = 0,
				st_nlink = 2,
				st_uid = 0,
				st_gid = 0,
				st_rdev = 0,
				st_blksize = 4096,
				st_blocks = 1,
				st_size = 4096,
				st_atime = _time,
				st_mtime = _time,
				st_ctime = _time,
			)
		ent = getent(path)
		if ent is None:
			raise Error(errno.ENOENT)
		return fuse.Stat(
			st_mode = 0100444,
			st_ino = 0,
			st_dev = 0,
			st_nlink = 1,
			st_uid = 0,
			st_gid = 0,
			st_rdev = 0,
			st_blksize = 4096,
			st_blocks = 1,
			st_size = len(ent),
			st_atime = _time,
			st_mtime = _time,
			st_ctime = _time,
		)


	@log
	def readdir(self, path, offset):
		if path != "/":
			raise Error(errno.ENOENT)
		return map(fuse.Direntry, lookup_users())

	@log
	def chmod(self, path, mode):
		if path == "/" or getent(path) is not None:
			raise Error(errno.EACCESS)
		else:
			raise Error(errno.ENOENT)

	@log
	def chown(self, path, uid, gid):
		if path == "/" or getent(path) is not None:
			raise Error(errno.EACCESS)
		else:
			raise Error(errno.ENOENT)

	@log
	def link(self, targetPath, linkPath):
		raise Error(errno.EACCESS)

	@log
	def mkdir(self, path, mode):
		raise Error(errno.EACCESS)

	@log
	def mknod(self, path, mode, dev):
		raise Error(errno.EACCESS)

	@log
	def readlink(self, path):
		if path == "/" or getent(path) is not None:
			raise Error(errno.EINVAL)
		else:
			raise Error(errno.ENOENT)

	@log
	def rename(self, oldPath, newPath):
		if oldPath == "/" or getent(oldPath) is not None:
			raise Error(errno.EACCESS)
		else:
			raise Error(errno.ENOENT)

	@log
	def rmdir(self, path):
		if path == "/":
			raise Error(errno.ENOTEMPTY)
		if getent(path) is None:
			raise Error(errno.ENOENT)
		raise Error(errno.ENOTDIR)

	"""
	@log
	def statfs(self):
		return posix.statvfs_result((
			1, # bsize,
			0, # frsize,
			0, # blocks,
			0, # bfree,
			0, # bavail,
			1, # files,
			0, # ffree,
			0, # favail,
			0, # flag,
			255, # namemax
		))
	"""

	@log
	def symlink(self, targetPath, linkPath):
		raise Error(errno.EACCESS)

	@log
	def unlink(self, path):
		if path == "/":
			raise Error(errno.EISDIR)
		if getent(path) is None:
			raise Error(errno.ENOENT)
		raise Error(errno.EACCESS)

	@log
	def utime(self, path, times):
		if path == "/" or getent(path) is not None:
			raise Error(errno.EACCESS)
		else:
			raise Error(errno.ENOENT)

	@log
	def fsinit(self):
		pass

	@log
	def access(self, path, mode):
		if mode == os.F_OK and path != "/" and getent(path) is None:
			raise Error(errno.EACCESS)
		if mode & os.W_OK:
			raise Error(errno.EACCESS)
		if (mode & os.X_OK) and path != "/":
			raise Error(errno.EACCESS)
		if (mode & os.R_OK) and path != "/" and getent(path) is None:
			raise Error(errno.EACCESS)
if __name__ == '__main__':
	config = load_config()
	fs = NullFS()
	fs.flags = 0
	fs.multithreaded = 0
	fs.parse(sys.argv)
	fs.main()
